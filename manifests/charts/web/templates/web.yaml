{{- /* === locals (최소화) === */ -}}
{{- $v := .Values -}}
{{- $mode := default "direct" $v.mode -}}
{{- $cport := default 80 $v.containerPort -}}

{{- $ing := default (dict) $v.ingress -}}
{{- $ingEnabled := default false ($ing.enabled) -}}
{{- $ingClass := $ing.className -}}
{{- $ingAnns  := default (dict) ($ing.annotations) -}}
{{- $ingHosts := default (list) ($ing.hosts) -}}
{{- $ingTLS   := $ing.tls -}}

{{- $probes := default (dict) $v.probes -}}
{{- $probePath := default "/" ($probes.path) -}}
{{- $rd := default (dict) ($probes.readiness) -}}
{{- $lv := default (dict) ($probes.liveness) -}}
{{- $st := default (dict) ($probes.startup) -}}

{{- $nlb := default (dict) $v.nlbWatcher -}}
{{- $nlbEnabled := default false ($nlb.enabled) -}}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: "web"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
---
{{- if and (eq $mode "direct") $nlbEnabled }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: web-nlb-service-reader
rules:
  - apiGroups: [""]
    resources: ["services","endpoints"]
    verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: web-nlb-service-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: web-nlb-service-reader
subjects:
  - kind: ServiceAccount
    name: web-frontend
    namespace: {{ .Release.Namespace }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deploy
  namespace: {{ .Release.Namespace }}
  labels:
    app: "web"
spec:
  replicas: {{ default 1 $v.replicaCount }}
  selector:
    matchLabels:
      app: "web"
  template:
    metadata:
      labels:
        app: "web"
    spec:
      serviceAccountName: web-frontend

      {{- with $v.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | nindent 8 }}
      {{- end }}

      volumes:
        - name: web-shared
          emptyDir: {}

      {{- if (default true $v.initApiBaseEnabled) }}
      initContainers:
        - name: init-api-base
          image: busybox:1.36
          command: ['sh','-lc']
          args:
            - |
              mkdir -p /opt/web-shared
              echo "http://{{ default "was-api-nlb" ($nlb.targetServiceName) }}.{{ default "was" ($nlb.targetServiceNamespace) }}.svc.cluster.local:{{ default 80 ($nlb.targetPort) }}" > /opt/web-shared/api_base
          volumeMounts:
            - name: web-shared
              mountPath: "/opt/web-shared"
      {{- end }}

      containers:
        - name: web
          image: "{{ $v.image.repository }}:{{ default .Chart.AppVersion $v.image.tag }}"
          imagePullPolicy: "{{ default "IfNotPresent" $v.image.pullPolicy }}"
          ports:
            - name: http
              containerPort: {{ $cport }}
              protocol: TCP
          env:
            - name: PORT
              value: "{{ $cport }}"
            - name: HOST
              value: "{{ default "0.0.0.0" ($v.server.host) }}"
            {{- if eq $mode "direct" }}
            - name: API_BASE_FILE
              value: "{{ default "/opt/web-shared/api_base" ($nlb.outFile) }}"
            {{- else }}
            - name: API_BASE
              value: "http://127.0.0.1:15000"
            {{- end }}
            {{- with $v.redis }}
            {{- if .enabled }}
            - name: REDIS_HOST
              value: "{{ .host }}"
            - name: REDIS_PORT
              value: "{{ .port }}"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ default "redis-auth" .secretName }}"
                  key: "{{ default "REDIS_PASSWORD" .secretKey }}"
            {{- end }}
            {{- end }}
            {{- with $v.extraEnv }}
            {{- range . }}
            - name: "{{ .name }}"
              value: "{{ .value }}"
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: web-shared
              mountPath: "/opt/web-shared"

          readinessProbe:
            {{- if default false ($rd.tcp) }}
            tcpSocket: { port: "http" }
            {{- else }}
            httpGet: { path: "{{ $probePath }}", port: "http" }
            {{- end }}
            initialDelaySeconds: {{ default 10 ($rd.initialDelaySeconds) }}
            periodSeconds: {{ default 10 ($rd.periodSeconds) }}
            timeoutSeconds: {{ default 1  ($rd.timeoutSeconds) }}
            failureThreshold: {{ default 3 ($rd.failureThreshold) }}

          livenessProbe:
            {{- if default false ($lv.tcp) }}
            tcpSocket: { port: "http" }
            {{- else }}
            httpGet: { path: "{{ $probePath }}", port: "http" }
            {{- end }}
            initialDelaySeconds: {{ default 30 ($lv.initialDelaySeconds) }}
            periodSeconds: {{ default 30 ($lv.periodSeconds) }}
            timeoutSeconds: {{ default 1  ($lv.timeoutSeconds) }}
            failureThreshold: {{ default 3 ($lv.failureThreshold) }}

          {{- if default true ($st.enabled) }}
          startupProbe:
            {{- if default false ($st.tcp) }}
            tcpSocket: { port: "http" }
            {{- else }}
            httpGet: { path: "{{ $probePath }}", port: "http" }
            {{- end }}
            failureThreshold: {{ default 60 ($st.failureThreshold) }}
            periodSeconds:   {{ default 3  ($st.periodSeconds) }}
            timeoutSeconds:  {{ default 2  ($st.timeoutSeconds) }}
          {{- end }}

          {{- with $v.resources }}
          resources:
{{ toYaml . | nindent 12 }}
          {{- end }}

        {{- if and (eq $mode "direct") $nlbEnabled }}
        - name: nlb-watcher
          image: "{{ default "bitnami/kubectl:latest" ($nlb.image) }}"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: NAMESPACE
              value: "{{ default "was" ($nlb.targetServiceNamespace) }}"
            - name: SVC_NAME
              value: "{{ default "was-api-nlb" ($nlb.targetServiceName) }}"
            - name: OUT_FILE
              value: "{{ default "/opt/web-shared/api_base" ($nlb.outFile) }}"
            - name: TARGET_PORT
              value: "{{ default 80 ($nlb.targetPort) }}"
          command: ["/bin/sh","-c"]
          args:
            - >
              set -eu;
              echo "Starting NLB watcher...";
              while true; do
                OUT="$(kubectl get svc $SVC_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>&1 || true)";
                if echo "$OUT" | grep -qiE 'forbidden|error'; then
                  echo "[watcher] kubectl error: $OUT" >&2;
                  sleep 10; continue;
                fi;
                DNS="$OUT";
                if [ -n "$DNS" ]; then
                  echo "http://$DNS:$TARGET_PORT" > "$OUT_FILE";
                  echo "[watcher] wrote $OUT_FILE = http://$DNS:$TARGET_PORT";
                else
                  echo "[watcher] hostname empty; retrying...";
                fi;
                sleep {{ default 20 ($nlb.pollInterval) }};
              done
          volumeMounts:
            - name: web-shared
              mountPath: "/opt/web-shared"
        {{- end }}

      {{- with $v.nodeSelector }}
      nodeSelector:
{{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $v.affinity }}
      affinity:
{{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $v.tolerations }}
      tolerations:
{{ toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: web-frontend
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: "web"
  type: "{{ default "ClusterIP" $v.service.type }}"
  ports:
    - name: http
      port: {{ default 80 $v.service.port }}
      targetPort: "http"
---
{{- if $ingEnabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-alb
  namespace: {{ .Release.Namespace }}
  {{- with $ingAnns }}
  annotations:
{{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if $ingClass }}
  ingressClassName: "{{ $ingClass }}"
  {{- end }}
  {{- with $ingTLS }}
  tls:
{{ toYaml . | nindent 4 }}
  {{- end }}
  rules:
  {{- range $ingHosts }}
    - host: "{{ .host }}"
      http:
        paths:
        {{- range .paths }}
          - path: "{{ .path | default "/" }}"
            pathType: "{{ .pathType | default "Prefix" }}"
            backend:
              service:
                name: "web-frontend"
                port:
                  number: {{ default 80 $v.service.port }}
        {{- end }}
  {{- end }}
{{- end }}
