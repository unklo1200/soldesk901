apiVersion: v1
kind: Secret
metadata:
  name: was-secrets
  namespace: was
type: Opaque
stringData:
  DB_USER: awslearner
  DB_PASS: awslearner
  DB_NAME: project

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: was-config
  namespace: was
data:
  DB_HOST: projectrds.c0feiu04cr8o.us-east-1.rds.amazonaws.com
  DB_PORT: '3306'
  DB_DRIVER: pymysql
  DB_CHARSET: utf8mb4
  AWS_REGION: us-east-1
  S3_BUCKET: soldesk-kim
  S3_MODE: presign

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: was-api
  namespace: was
  annotations: null

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: was-api
  namespace: was
  labels:
    app: was-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: was-api
  template:
    metadata:
      labels:
        app: was-api
    spec:
      nodeSelector:
        workload: was
      tolerations:
      - key: dedicated
        operator: Equal
        value: was
        effect: NoSchedule
      serviceAccountName: was-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      volumes:
      - name: tmp
        emptyDir: {}
      containers:
      - name: was-api
        image: ghcr.io/unklo1200/was-updated:v12
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
        envFrom:
        - secretRef:
            name: was-secrets
        - configMapRef:
            name: was-config
        env:
        - name: HEALTH_DB_CHECK
          value: '0'
        - name: TMPDIR
          value: /tmp
        - name: GUNICORN_CMD_ARGS
          value: --worker-tmp-dir /tmp
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 5
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          failureThreshold: 60
          periodSeconds: 2
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 3
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      imagePullSecrets:
      - name: ghcr-pull-secret

---
apiVersion: v1
kind: Service
metadata:
  name: was
  namespace: was
spec:
  type: ClusterIP
  selector:
    app: was-api
  ports:
  - name: http
    port: 8000
    targetPort: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: was-api-nlb
  namespace: was
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-internal: 'true'
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: traffic-port
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: HTTP
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: deregistration_delay.timeout_seconds=10
spec:
  type: LoadBalancer
  selector:
    app: was-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
