apiVersion: v1
kind: Namespace
metadata:
  name: was
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: was-sa
  namespace: was
imagePullSecrets:
  - name: ghcr-pull-secret
---
apiVersion: v1
kind: Secret
metadata:
  name: was-db-secret
  namespace: was
type: Opaque
stringData:
  DB_USERNAME: "admin"
  DB_PASSWORD: "your passwd"
  MYSQL_USER: "admin"
  MYSQL_PASSWORD: "your passwd"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: was-db-config
  namespace: was
data:
  DB_HOST: "test.cl6k4y6qsqhk.ap-northeast-2.rds.amazonaws.com"
  DB_NAME: "test"
  MYSQL_HOST: "test.cl6k4y6qsqhk.ap-northeast-2.rds.amazonaws.com"
  MYSQL_DATABASE: "test"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: was-deploy
  namespace: was
  labels:
    app: was
spec:
  replicas: 1
  selector:
    matchLabels:
      app: was
  template:
    metadata:
      labels:
        app: was
    spec:
      serviceAccountName: was-sa
      nodeSelector:
        eks.amazonaws.com/nodegroup: ng-was
      imagePullSecrets:
        - name: ghcr-pull-secret
      containers:
        - name: was
          image: ghcr.io/unklo1200/was:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: was-db-secret
            - configMapRef:
                name: was-db-config
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: was-svc
  namespace: was
  labels:
    app: was
spec:
  type: ClusterIP
  selector:
    app: was
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: was-allow-web-only
  namespace: was
spec:
  podSelector:
    matchLabels:
      app: was
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: web
      ports:
        - protocol: TCP
          port: 8000
