apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
  namespace: redis
type: Opaque
stringData:
  # ⚠️ 반드시 바꿔서 사용하세요. (Git에 올리면 보안 노출)
  REDIS_PASSWORD: "Strong.P@ssw0rd"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      # 너가 쓰는 스케줄링 정책(ng-was 전용)
      nodeSelector:
        workload: "was"
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "was"
          effect: "NoSchedule"

      containers:
        - name: redis
          image: redis:7.2-alpine
          imagePullPolicy: IfNotPresent

          # 비밀번호는 Secret에서 주입
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: REDIS_PASSWORD

          # 쉘로 실행 → 환경변수 치환 보장
          command: ["/bin/sh","-c"]
          args:
            - |
              exec redis-server \
                --appendonly yes \
                --requirepass "$REDIS_PASSWORD"

          ports:
            - name: redis
              containerPort: 6379

          # 헬스체크도 인증 붙여서 확인
          readinessProbe:
            exec:
              command: ["/bin/sh","-c","redis-cli -a \"$REDIS_PASSWORD\" ping | grep PONG"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["/bin/sh","-c","redis-cli -a \"$REDIS_PASSWORD\" ping | grep PONG"]
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"

          volumeMounts:
            - name: data
              mountPath: /data

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        # EKS 기본 StorageClass(gp3 등) 사용. 필요 시 storageClassName 지정
        resources:
          requests:
            storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
